// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/ghostsquad/slack-off (interfaces: FileReader,HttpPoster)

package mock_slack_off

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
)

// Mock of FileReader interface
type MockFileReader struct {
	ctrl     *gomock.Controller
	recorder *_MockFileReaderRecorder
}

// Recorder for MockFileReader (not exported)
type _MockFileReaderRecorder struct {
	mock *MockFileReader
}

func NewMockFileReader(ctrl *gomock.Controller) *MockFileReader {
	mock := &MockFileReader{ctrl: ctrl}
	mock.recorder = &_MockFileReaderRecorder{mock}
	return mock
}

func (_m *MockFileReader) EXPECT() *_MockFileReaderRecorder {
	return _m.recorder
}

func (_m *MockFileReader) ReadFile(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "ReadFile", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileReaderRecorder) ReadFile(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadFile", arg0)
}

// Mock of HttpPoster interface
type MockHttpPoster struct {
	ctrl     *gomock.Controller
	recorder *_MockHttpPosterRecorder
}

// Recorder for MockHttpPoster (not exported)
type _MockHttpPosterRecorder struct {
	mock *MockHttpPoster
}

func NewMockHttpPoster(ctrl *gomock.Controller) *MockHttpPoster {
	mock := &MockHttpPoster{ctrl: ctrl}
	mock.recorder = &_MockHttpPosterRecorder{mock}
	return mock
}

func (_m *MockHttpPoster) EXPECT() *_MockHttpPosterRecorder {
	return _m.recorder
}

func (_m *MockHttpPoster) Post(_param0 string, _param1 interface{}) (*http.Response, error) {
	ret := _m.ctrl.Call(_m, "Post", _param0, _param1)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockHttpPosterRecorder) Post(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Post", arg0, arg1)
}
